/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package boligen

import kotlinx.serialization.*
import io.ktor.application.*
import io.ktor.features.*
import io.ktor.serialization.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.http.*
import io.ktor.server.netty.Netty
import io.ktor.server.engine.embeddedServer
import io.ktor.gson.*
import java.util.UUID
import boligen.applicationService

//val applicationStore: HashMap<String, Application> = HashMap()
val applicationService = ApplicationService()

@Serializable
data class Application(val id:String)

class ApplicationService() {
    val store: MutableMap<UUID, Application> = HashMap()

    fun admitApplication(application: Application): UUID {
        val id = UUID.randomUUID()
        store.put(id, application)
        return id
    }

    fun get(id: UUID): Application? {
        return store.get(id)
    }

    fun list(): MutableMap<UUID, Application>{
        return store
    }
}

fun main(args: Array<String>) {
    
    embeddedServer(Netty, 8080) {

        install(ContentNegotiation) {
            gson()
        }
        
        routing {
            get("/applications/{id}") {
                val id = call.parameters["id"]
                //val application = applicationStore.get(id)
                val application = applicationService.get(UUID.fromString(id))
                if ( application == null) {
                    call.respondText("No application found for id " + id)
                } else {
                    call.respondText("Application: " + application.toString())
                }
            }
            get("/applications") {
                
                //call.respondText(applicationStore.values.joinToString() { it.toString() + ", "})
                call.respondText(applicationService.list().values.joinToString() { it.toString() + ", "})
            }
            post("/applications") {
                val application = call.receive<Application>()
                //val id = applicationStore.put(application.id, application)
                val id = applicationService.admitApplication(application)
                call.respondText("Applications stored with id " + id, status = HttpStatusCode.Created)
            }
        }
    }.start(wait = true)
}

